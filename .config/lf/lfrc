# interpreter for shell commands (needs to be POSIX compatible)
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set color256
set drawbox
set filesep "\n"
set previewer ~/.config/lf/scope

# execute current file (must be executable)
map x $$f
map X !$f

#     Prefix  Wait  Async  Stdin  Stdout  Stderr  UI action
#     $       No    No     Yes    Yes     Yes     Pause and then resume
#     %       No    No     Yes    Yes     Yes     Statline for input/output
#     !       Yes   No     Yes    Yes     Yes     Pause and then resume
#     &       No    Yes    No     No      No      Do nothing

#$f   current file
#$fs  selected file(s) separated with 'filesep'
#$fx  current file or selected file(s) if any
#$id  id number of the client


# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case "$(file --dereference --mime-type $f -b)" in
        text/*) $EDITOR "$f";;
        inode/x-empty) $EDITOR "$f";;
	    image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura "$f" >/dev/null 2>&1;;
        *) for f in $fx; do notify-send -t 3000 "lf" "opened $(file --dereference --mime-type $f -b) with xdg-open"; setsid xdg-open "$f" >/dev/null 2>&1; done;;
    esac
}}

cmd trash %for f in $fx; do trash-put "$f"; done
cmd rename %[[ -e $1 ]] && printf "file exists" || mv $f $1
cmd mkdir %printf "Directory name: " && read -e ans && mkdir "$ans"
cmd mkfile %printf "File name: " && read -e ans && touch "$ans"
cmd extract %atool -x "$f"


cmd chmod ${{
  printf "0: ---\n1: --x\n2: -w-\n3: -wx\n4: r--\n5: r-x\n6: rw-\n7: rwx\n"
  read -n 3 -p "Mode Bits: " ans

  for file in "$fx"
  do
      chmod $ans $file
  done
}}



# compress current file or selected files with zip
cmd zip ${{
    for f in $fx; do
        files+=("$f")
    done
    7z a -m0=LZMA2 -mx=9 -mmt"$(nproc)" archive.7z "${files[@]}"
}}

cmd targz %{{
    a="archive"
    mkdir $a
    cp -r $fx $a
    tar czf "$a.tar.gz" $a
    rm -rf $a
}}


cmd code %code $(dirname $f)

# Bindings
# Remove defaults
map m
map c
map "'"
map '"'
map o
map v
map u unselect
map C clear
map q quit

# colemak
map e up
map n down
map k updir
map i open
map l search-next
map L search-prev

# Basic functions
map <delete> trash
map D trash
map . set hidden!
map r push :rename<space>
map R reload
map ch chmod
map md mkdir
map mf mkfile
map I invert

# Archive
map az zip
map at targz
map au extract

# Movement
map gd cd ~/Downloads
map gu cd ~/University
map gD cd ~/dotfiles
map gb cd ~/.local/bin
map gc cd ~/.config
map gs cd ~/go/src/github.com/alx99

# Open stuff
map oc code
