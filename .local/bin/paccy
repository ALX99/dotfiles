#!/bin/bash
# Pacman + yay wrapper to keep track of installed packages

pkgList=~/dotfiles/.pkgList # Path to package list
install_pkgs(){
    yay -S --needed "$@" || return 1

    # Write the packages to the pkgList
    for pkg in "${@}"; do
        # Only do something if the package already isn't there
        grep -F "$pkg" "$pkgList" &>/dev/null
        if [ $? -ne 0 ]; then
            if [ -z "$comment" ]; then
                echo "$pkg" >> "$pkgList"
            else
                echo "$pkg # $comment" >> "$pkgList"
            fi
        fi
    done

    # Sort and remove dupes
    local sorted=$(cat "$pkgList" | sort -u)
    echo "$sorted" > "$pkgList"
}
remove_pkgs(){
    sudo pacman -Rns "$@" || return 1
    for pkg in "$@"; do
        sed -i '/'"$pkg"'/d' "$pkgList" 
    done
}
# Installs all the packages listed under the packagelist
install(){
    yay -S --needed $(cut -d ' ' -f1 "$pkgList")
}
update(){
    sudo reflector --latest 200 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

parameters="$@" # Save the original parameters
pkgInstall=false
pkgRemove=false

while [ $# -gt 0 ]; do
    par="$1"
    case $par in
        -Syu) yay -Syu; shift;;
        -S) pkgInstall=true;  shift;;
        -Rns) pkgRemove=true; shift;;
        -c|-C) comment="$2"; shift 2;;
        -fa) yay --aur $parameters; exit;; # Search in AUR
        -fr) yay --repo $parameters; exit;; # Search in repo
        --install) install; shift;;
        --update) update; shift;;
        -*) pacman $parameters; exit;; # Pass on to pacman and exit
        *) pkgs+=("$par"); shift;; # If no dash we'll assume this is a package
    esac
done

# Either install or remove pkgs but not both
$pkgInstall && $pkgRemove && \
echo "You can't both install and remove packages at the same time!" \
&& exit 1

$pkgInstall && install_pkgs "${pkgs[@]}"
$pkgRemove && remove_pkgs "${pkgs[@]}"
